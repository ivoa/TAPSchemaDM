{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TAPSchemaDM","text":"<p>This is the TAP schema defined using VO-DML and created so that a mapping from a arbitrary VO-DML model to its TAP schema can be serialized. The VO-DML tooling will produce the TAP schema for a model as part of the output of the <code>vodmlSchema</code> command.</p> <p>The model follows the description of TAP schema in the TAP Standard. The TAP Standard does not provide a machine-readable version of the TAP Schema - this DM fills that gap. Some of model element names themselves are different from the names used in the TAP standard (and this is reflected in the XML serialization). However, naturally the RDB serialization will produce exactly the required tables as described in the TAP Standard - although there are some additional columns produced.</p>"},{"location":"#how-to-use","title":"How to use","text":""},{"location":"#java","title":"Java","text":"<p>The Standard VO-DML tooling will produce a TAPSchemaDM instance in the static<code>.TAPSchema()</code> method of the generated model (See TapSchemaModel for the Model class of the TAPSchemaDM itself). The code below shows the essential steps for storing the generated TAPSchema in a database. In this case it is for the TAPSchema for the TAPSchema itself, but it will apply for any model code generated by the VO-DML tooling - which itself does not have a direct dependency declared for this library. However, then to decode and save the TAPSchema instance in a project then a direct dependency to the   should be declared.</p> <ul> <li>Unmarshal the XML instance</li> <li>Normalise the tap schema instance to produce the extra key columns required by the database serialization</li> <li>Serialize this model instance to the database.</li> </ul> <pre><code>TapschemaModel model = new TapschemaModel();\nInputStream is = TapschemaModel.TAPSchema();\nJAXBContext jc = model.management().contextFactory();\nUnmarshaller unmarshaller = jc.createUnmarshaller(); \nJAXBElement&lt;TapschemaModel&gt; el = unmarshaller.unmarshal(new StreamSource(is), TapschemaModel.class);\nTapschemaModel model_in = el.getValue();\norg.ivoa.dm.tapschema.ColNameKeys.normalize(model_in); // note that this step is necessary before saving to the database to set up the table_name foreign keys\nEntityManager em = emf.createEntityManager(); \nem.getTransaction().begin();\nmodel_in.management().persistRefs(em);\nem.persist(model_in.getContent(Schema.class).get(0)); \nem.getTransaction().commit();\n</code></pre>"},{"location":"#direct-to-ddl","title":"Direct to DDL","text":"<p>It is possible to work directly with the XML TAPSchema instances (produced by the VO-DML tools vodmlSchema command) to produce DDL to both create the model tables and fill the TAPSchema tables with the model descriptions.</p>"},{"location":"#model-tables","title":"Model Tables","text":"<p>The DDL for the model tables can be created by executing the tap2posgresql.xsl against the TAPSchema instance. This repository has a test showing this being driven by Java code - in this case the DDL is being created for the TAPSchema itself. </p> <p>It is possible to drive the transformation from the commandline (after installing the Saxon XSLT processor)</p> <pre><code>java  -jar /opt/packages/SaxonHE12-7J/saxon-he-12.7.jar -xsl:src/main/resources/tap2posgresql.xsl -s:build/generated/sources/vodml/schema/tapschema.vo-dml.tap.xml \n</code></pre> <p>It would be equally possible to drive from other languages where Saxon is supported e.g. Python via saxonche. </p>"},{"location":"#tapschema-content","title":"TAPSchema Content","text":"<p>The TAPSchema content for a particular Model can be created by execution the tap2instanceDDL.xsl XSLT against the TAPSchema instance for a particular model.</p>"},{"location":"#transforming-to-vosi-tables","title":"Transforming to VOSI Tables","text":"<p>The design of TAP Schema is very similar to the VOSI Tables definition, but not exactly the same. There is tap2VOSI.xsl that can be used to transform a TAPSchemaDM XML instance to a VOSI Tables XML instance.</p>"},{"location":"Design/","title":"TAPSchema Design","text":"<p>The TAP schema is described in the TAP Standard in terms of some outline table definitions with some accompanying text. In trying to make a VO-DML definition of the schema there are some challenges due to the extra rigour in definition that this introduces.</p> <p>The design of the VO-DML definition has been driven mainly by obtaining a usable and relatively compact XML serialization, <code>table</code>s are children of <code>Schema</code>, <code>column</code>s and <code>ForeignKey</code>s are children of <code>table</code>s, and the columns of <code>ForeignKey</code>s are references to columns defined in <code>table</code>s.  Although columns are the only things that are referenced, and consequently the only model elements that actually need identifiers in XML terms,  the NaturalKey constraint (new to VO-DML 1.1) is used with most of the other elements so that no surrogate keys are created. The <code>FKColumns</code> being a direct composition of the <code>ForeignKey</code> does not have an obvious NaturalKey of its own, and so does get a surrogate key created in the <code>TAP_SCHEMA.key_columns</code> table. In addition is is \"natural\" for the VO-DML tooling is to create foreign keys  to the \"from\" and \"target\" tables which results in extra <code>from_column_table</code> and <code>target_column_table</code> columns in the <code>TAP_SCHEMA.key_columns</code> table.</p> <p>In order for the columns to have a truly unique key in the XML serialization the column identifiers are made up from prefixing the column names with the table and schema names delimited with a period. The transformation from the XML serialization into TAPSchema content has to manipulate these column names into the desired forms.</p>"},{"location":"Design/#issues-with-tapschema","title":"Issues with TAPSchema","text":"<p>In creating this model and associated tooling there are a number of things in the design of TAPSchema</p> <ul> <li>TAPSchema does not explicitly define what primary key for a particular table is - indexed does not mean primary key. It can generally be inferred from the foreign keys on other tables, but this is only true of course if there is a table with which it is joined.</li> <li>This library will store instances with the schema appended to the table names by default - however this can be switched off by defining <code>TAPSCHEMADM_NO_SCHEMA_IN_TABLE_NAME</code> as an environment variable. </li> <li>The TAP standard does say that the table_name should be able to be used directly in ADQL, but then it makes the inclusion of schema in the model rather superfluous. It does lead to some other complexities</li> <li>It introduces a security vulnerability that malicious content could be put into a tap schema instance, that a client might unwittingly pass on.</li> <li>if an implementation has only one schema then it might choose to leave off the schema from the table name - as the only requirement from the TAP standard is that the table names are unique.  This might lead to inconsistencies in the description of \"standard\" models like obscore.<ul> <li>there is then an issue with case insensitivity and the possible inclusion of quotes in the table names that particular implementations might need to include </li> </ul> </li> <li>Compatibility with VOSI tables</li> <li>dataType mapping has issues</li> <li>the table type definitions do not match</li> </ul>"},{"location":"Design/#other-implementations-of-tap-schema","title":"Other Implementations of TAP Schema","text":"<p>Both voltt and OpenCADC define the TAP Schema in terms of DDL - although they do make some different choices on the exact keys and indexes. GAVO DaCHS takes a different approach in defining the TAP schema in terms of its internal \"resource definitions\". </p>"},{"location":"schema/","title":"Schema","text":"<p>The schema for the model instance serializations can be found below</p> <ul> <li>XML</li> <li>JSON</li> </ul> <p>The database schema for the TAPschema conforms with the standard</p> <p></p> <p>and the tapschema instance of the tapschema</p>"},{"location":"generated/IVOA-v1.0.vo-dml/","title":"ivoa","text":"<p>version 1.0 2018-05-05</p>"},{"location":"generated/IVOA-v1.0.vo-dml/#introduction","title":"Introduction","text":"<p>This is the main reference data model containing primitive types used in other data models.</p>"},{"location":"generated/IVOA-v1.0.vo-dml/#authors","title":"Authors","text":""},{"location":"generated/IVOA-v1.0.vo-dml/#overview-diagram","title":"Overview diagram","text":"<p>The whole model is represented in a model diagram below</p> GVmapivoa data modelivoa:Unit &lt;&lt;primitive type&gt;&gt; Unit ivoa:string &lt;&lt;primitive type&gt;&gt; string ivoa:Unit-&gt;ivoa:stringivoa:anyURI &lt;&lt;primitive type&gt;&gt; anyURI ivoa:anyURI-&gt;ivoa:stringivoa:boolean &lt;&lt;primitive type&gt;&gt; boolean ivoa:complex &lt;&lt;primitive type&gt;&gt; complex ivoa:datetime &lt;&lt;primitive type&gt;&gt; datetime ivoa:integer &lt;&lt;primitive type&gt;&gt; integer ivoa:nonnegativeInteger &lt;&lt;primitive type&gt;&gt; nonnegativeInteger ivoa:rational &lt;&lt;primitive type&gt;&gt; rational ivoa:real &lt;&lt;primitive type&gt;&gt; real ivoa:IntegerQuantity &lt;&lt;datatype&gt;&gt; IntegerQuantity +value : ivoa:integer ivoa:Quantity &lt;&lt;datatype&gt;&gt; Quantity +unit : ivoa:Unit ivoa:IntegerQuantity-&gt;ivoa:Quantityivoa:RealQuantity &lt;&lt;datatype&gt;&gt; RealQuantity +value : ivoa:real ivoa:RealQuantity-&gt;ivoa:Quantity"},{"location":"generated/IVOA-v1.0.vo-dml/#primitives","title":"Primitives","text":"<ul> <li>Unit</li> <li>anyURI</li> <li>boolean</li> <li>complex</li> <li>datetime</li> <li>integer</li> <li>nonnegativeInteger</li> <li>rational</li> <li>real</li> <li>string</li> </ul>"},{"location":"generated/IVOA-v1.0.vo-dml/#datatypes","title":"DataTypes","text":"<ul> <li>IntegerQuantity</li> <li>Quantity</li> <li>RealQuantity</li> </ul>"},{"location":"generated/tapschema.vo-dml/","title":"tapschema","text":"<p>version 1.0 2025-07-15</p>"},{"location":"generated/tapschema.vo-dml/#introduction","title":"Introduction","text":"<p>tapschema model</p>"},{"location":"generated/tapschema.vo-dml/#authors","title":"Authors","text":"<p>Paul Harrison</p>"},{"location":"generated/tapschema.vo-dml/#overview-diagram","title":"Overview diagram","text":"<p>The whole model is represented in a model diagram below</p> GVmaptapschema data modeltapschema:TableType &lt;&lt;enumeration&gt;&gt; TableType +table +view tapschema:TAPType &lt;&lt;enumeration&gt;&gt; TAPType +BOOLEAN +SMALLINT +INTEGER +BIGINT +REAL +DOUBLE +TIMESTAMP +CHAR +VARCHAR +BINARY +VARBINARY +POINT +REGION +CLOB +BLOB tapschema:Schema Schema +schema_name : ivoa:string +utype : ivoa:string +description : ivoa:string +schema_index : ivoa:integer tapschema:table table +table_name : ivoa:string +table_type : tapschema:TableType +utype : ivoa:string +description : ivoa:string +table_index : ivoa:integer tapschema:Schema-&gt;tapschema:tabletables1..*tapschema:column column +column_name : ivoa:string +datatype : tapschema:TAPType +arraysize : ivoa:string +xtype : ivoa:string +size : ivoa:integer +description : ivoa:string +utype : ivoa:string +unit : ivoa:string +ucd : ivoa:string +indexed : ivoa:boolean +principal : ivoa:boolean +std : ivoa:boolean +column_index : ivoa:integer tapschema:table-&gt;tapschema:columncolumns1..*tapschema:ForeignKey ForeignKey +key_id : ivoa:string +description : ivoa:string +utype : ivoa:string tapschema:table-&gt;tapschema:ForeignKeyfkeys0..*tapschema:ForeignKey-&gt;tapschema:tabletarget_table1tapschema:FKColumn FKColumn tapschema:ForeignKey-&gt;tapschema:FKColumncolumns1..*tapschema:FKColumn-&gt;tapschema:columnfrom_column1tapschema:FKColumn-&gt;tapschema:columntarget_column1"},{"location":"generated/tapschema.vo-dml/#enums","title":"Enums","text":"<ul> <li>TAPType</li> <li>TableType</li> </ul>"},{"location":"generated/tapschema.vo-dml/#objecttypes","title":"ObjectTypes","text":"<ul> <li>FKColumn</li> <li>ForeignKey</li> <li>Schema</li> <li>column</li> <li>table</li> </ul>"},{"location":"generated/tapschema.vo-dml/#references","title":"References","text":"<ul> <li>column contained</li> <li>table contained</li> </ul>"},{"location":"generated/tapschema.vo-dml/#imports","title":"Imports","text":"<ul> <li>ivoa</li> </ul>"},{"location":"generated/ivoa/IntegerQuantity/","title":"dataType IntegerQuantity","text":"<p>extends Quantity</p> <p>An integer number with a unit. Examples of such units that can be used for attributes are bit/byte/kiloByte etc.</p> <p>\u00abdataType\u00bbIntegerQuantityivoa:integer value\u00abdataType\u00bbQuantity</p>"},{"location":"generated/ivoa/IntegerQuantity/#members","title":"Members","text":"name type mult description value integer The integer value of this IntegerQuantity."},{"location":"generated/ivoa/Quantity/","title":"abstract dataType Quantity","text":"<p>Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.</p> <p>\u00abdataType\u00bbQuantityivoa:Unit unit\u00abdataType\u00bbIntegerQuantity\u00abdataType\u00bbRealQuantity</p>"},{"location":"generated/ivoa/Quantity/#members","title":"Members","text":"name type mult description unit Unit optional The unit of this quantity."},{"location":"generated/ivoa/RealQuantity/","title":"dataType RealQuantity","text":"<p>extends Quantity</p> <p>A real value with a unit.</p> <p>\u00abdataType\u00bbRealQuantityivoa:real value\u00abdataType\u00bbQuantity</p>"},{"location":"generated/ivoa/RealQuantity/#members","title":"Members","text":"name type mult description value real The real value of this quantity"},{"location":"generated/ivoa/Unit/","title":"primitiveType Unit","text":"<p>extends string</p> <p>Must conform to definition of unit in VOUnit spec.</p>"},{"location":"generated/ivoa/anyURI/","title":"primitiveType anyURI","text":"<p>extends string</p> <p>Represents a URI in the same way as the datatype of the same nam in XML Schema is used.</p>"},{"location":"generated/ivoa/boolean/","title":"primitiveType boolean","text":"<p>The standard boolean, having values true or false.</p>"},{"location":"generated/ivoa/complex/","title":"primitiveType complex","text":"<p>Represents a complex number, consisting of a real and imaginary component, both of which are reals. Note that in many contexts there is no native mapping for this type and it must be treated with a custom mapping.</p>"},{"location":"generated/ivoa/datetime/","title":"primitiveType datetime","text":"<p>Represents a moment in time using a date+timestamp.</p>"},{"location":"generated/ivoa/integer/","title":"primitiveType integer","text":"<p>An integer number (from Z).</p>"},{"location":"generated/ivoa/nonnegativeInteger/","title":"primitiveType nonnegativeInteger","text":"<p>An integer number from N, therefore greater than or equal to 0.</p>"},{"location":"generated/ivoa/rational/","title":"primitiveType rational","text":"<p>A rational number from Q, represented by two integers, a numerator and a denominator. A native mapping to a serialisation context does in general not exists.</p>"},{"location":"generated/ivoa/real/","title":"primitiveType real","text":"<p>A real number (from R).</p>"},{"location":"generated/ivoa/string/","title":"primitiveType string","text":"<p>A string, represented as an array of characters treated as a single, primitive value. Ala Java, a string can not be updated, that is any update leads to a different string. However in contrast to Java we assume that two strings that are identical in all their constitutent characters are the same. I.e. string has value type semantics.</p>"},{"location":"generated/javadoc/legal/jquery/","title":"Jquery","text":""},{"location":"generated/javadoc/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"generated/javadoc/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"generated/javadoc/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"generated/javadoc/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"generated/javadoc/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"generated/tapschema/FKColumn/","title":"objectType FKColumn","text":"<p>the foreign key columns</p> <p>FKColumncolumnForeignKeyfrom_column1target_column1columns1..*</p>"},{"location":"generated/tapschema/FKColumn/#members","title":"Members","text":"name type mult description from_column  column the column from which the key is referencing target_column  column the column that the key references"},{"location":"generated/tapschema/FKColumn/#references-detail","title":"References Detail","text":"<ul> <li>column is contained in  table</li> <li>column is contained in  table</li> </ul>"},{"location":"generated/tapschema/FKColumn/#containment","title":"Containment","text":"<p>This is contained by ForeignKey</p>"},{"location":"generated/tapschema/ForeignKey/","title":"objectType ForeignKey","text":"<p>foreign key definition</p> <p>ForeignKeyivoa:string key_idivoa:string descriptionivoa:string utypetableFKColumntarget_table1fkeys0..*columns1..*</p>"},{"location":"generated/tapschema/ForeignKey/#members","title":"Members","text":"name type mult description key_id  ivoa:string the id of the key target_table  table the target table of the foreign key description ivoa:string optional description utype ivoa:string optional utype columns FKColumn 1 or more The columns that make up the foreign key"},{"location":"generated/tapschema/ForeignKey/#references-detail","title":"References Detail","text":"<ul> <li>table is contained in  Schema</li> </ul>"},{"location":"generated/tapschema/ForeignKey/#containment","title":"Containment","text":"<p>This is contained by table</p>"},{"location":"generated/tapschema/Schema/","title":"objectType Schema","text":"<p>The schema</p> <p>Schemaivoa:string schema_nameivoa:string utypeivoa:string descriptionivoa:integer schema_indextabletables1..*</p>"},{"location":"generated/tapschema/Schema/#members","title":"Members","text":"name type mult description schema_name  ivoa:string The name of the schema utype ivoa:string optional utype description ivoa:string optional description schema_index ivoa:integer optional used to recommend table ordering for clients. Clients may order by index (ascending) so lower index items would appear earlier in a listing. tables table 1 or more the tables"},{"location":"generated/tapschema/Schema/#references-detail","title":"References Detail","text":"<p>Has contained reference(s) table, column in the containment hierarchy.</p>"},{"location":"generated/tapschema/TAPType/","title":"enumeration TAPType","text":"<p>Allowable types for TAP columns</p> <p>TAPTypeBOOLEANSMALLINTINTEGERBIGINTREALDOUBLETIMESTAMPCHARVARCHARBINARYVARBINARYPOINTREGIONCLOBBLOB</p>"},{"location":"generated/tapschema/TAPType/#values","title":"Values","text":"<ul> <li> <p>BOOLEAN - </p> </li> <li> <p>SMALLINT - </p> </li> <li> <p>INTEGER - </p> </li> <li> <p>BIGINT - </p> </li> <li> <p>REAL - </p> </li> <li> <p>DOUBLE - </p> </li> <li> <p>TIMESTAMP - </p> </li> <li> <p>CHAR - </p> </li> <li> <p>VARCHAR - </p> </li> <li> <p>BINARY - </p> </li> <li> <p>VARBINARY - </p> </li> <li> <p>POINT - </p> </li> <li> <p>REGION - </p> </li> <li> <p>CLOB - </p> </li> <li> <p>BLOB - </p> </li> </ul>"},{"location":"generated/tapschema/TableType/","title":"enumeration TableType","text":"<p>types of table</p> <p>TableTypetableview</p>"},{"location":"generated/tapschema/TableType/#values","title":"Values","text":"<ul> <li> <p>table - table</p> </li> <li> <p>view - view</p> </li> </ul>"},{"location":"generated/tapschema/column/","title":"objectType column","text":"<p>the column</p> <p>columnivoa:string column_nametapschema:TAPType datatypeivoa:string arraysizeivoa:string xtypeivoa:integer sizeivoa:string descriptionivoa:string utypeivoa:string unitivoa:string ucdivoa:boolean indexedivoa:boolean principalivoa:boolean stdivoa:integer column_indextableFKColumncolumns1..*from_column1target_column1</p>"},{"location":"generated/tapschema/column/#members","title":"Members","text":"name type mult description column_name  ivoa:string name of the column datatype TAPType the type of the column (VOTable semantics) arraysize ivoa:string optional the array size of the column xtype ivoa:string optional the xtype of the column size ivoa:integer optional deprecated in favour of arraysize description ivoa:string optional a description of the column utype ivoa:string optional the utype for the column unit ivoa:string optional the unit for the column (taken from VOUnits) ucd ivoa:string optional indexed ivoa:boolean does the column have an index principal ivoa:boolean indicates that the column is considered a core part of the content; clients can use this hint to make the principal column(s) visible, for example by selecting them by default in generating an ADQL query. In cases where the service selects the columns to return (such as a query language without an explicit output selection), the principal column indicates those columns that are returned by default std ivoa:boolean is the column defined by a standard column_index ivoa:integer optional used to recommend table ordering for clients. Clients may order by index (ascending) so lower index items would appear earlier in a listing."},{"location":"generated/tapschema/column/#references-detail","title":"References Detail","text":"<p>This is referred to by FKColumn</p>"},{"location":"generated/tapschema/column/#containment","title":"Containment","text":"<p>This is contained by table</p>"},{"location":"generated/tapschema/table/","title":"objectType table","text":"<p>The table</p> <p>tableivoa:string table_nametapschema:TableType table_typeivoa:string utypeivoa:string descriptionivoa:integer table_indexcolumnForeignKeySchemacolumns1..*fkeys0..*target_table1tables1..*</p>"},{"location":"generated/tapschema/table/#members","title":"Members","text":"name type mult description table_name  ivoa:string name of the table table_type TableType the type of table utype ivoa:string optional utype description ivoa:string optional description table_index ivoa:integer optional used to recommend table ordering for clients. Clients may order by index (ascending) so lower index items would appear earlier in a listing. columns column 1 or more the columns that make up the table fkeys ForeignKey 0 or more the foreign keys for this table"},{"location":"generated/tapschema/table/#references-detail","title":"References Detail","text":"<p>This is referred to by ForeignKey Has contained reference(s) column in the containment hierarchy.</p>"},{"location":"generated/tapschema/table/#containment","title":"Containment","text":"<p>This is contained by Schema</p>"}]}